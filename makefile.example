# migrations placed under this directory
# do not edit this section
MIGRATION_DIR=./migrations

# edit this to match your env dev|prod|test etc
ENV=dev

# ==========================================================
# edit this fields to match your database enviroment
# must match with app database
# user name of database
POSTGRES_USER=edunota

# pasword of database
POSTGRES_PASSWORD=edunota

# database to apply migrations
POSTGRES_DB=edunota

# port of database
POSTGRES_PORT=5582

# hostname of database
POSTGRES_HOST=localhost


# ============================================
# used by goose, do not edit these fields																								    
export GOOSE_DBSTRING=user=$(POSTGRES_USER) password=$(POSTGRES_PASSWORD) host=$(POSTGRES_HOST) port=$(POSTGRES_PORT) dbname=$(POSTGRES_DB)
export GOOSE_DRIVER=postgres
# ============================================

# ==========================================================
# commands
# spin up database and other services on docker compose
spinup: 
	bash -c "sudo docker compose --project-directory=infrastructure/$(ENV) up -d"

# ==========================================================
# create new migration file
create: 
	bash -c "goose -dir=$(MIGRATION_DIR) create $(name) sql"

# ==========================================================
# Migrate the DB to the most recent version available
up:
	bash -c "goose -dir=$(MIGRATION_DIR) up"

# ==========================================================
# Migrate the DB up by 1
up-by-one:
	bash -c "goose -dir=$(MIGRATION_DIR) up-by-one"

# ==========================================================
#  Migrate the DB to a specific VERSION
up-to:
	bash -c "goose -dir=$(MIGRATION_DIR) up-to $(ver)"

# ==========================================================
# Roll back the version by 1
down:
	bash -c "goose -dir=$(MIGRATION_DIR) down"


# ==========================================================
# Roll back to a specific VERSION
down-to:
	bash -c "goose -dir=$(MIGRATION_DIR) down-to $(ver)"


# ==========================================================
#  Re-run the latest migration
redo:
	bash -c "goose -dir=$(MIGRATION_DIR) redo"


# ==========================================================
# Roll back all migrations
reset:
	bash -c "goose -dir=$(MIGRATION_DIR) reset"


# ==========================================================
# Dump the migration status for the current DB
status:
	bash -c "goose -dir=$(MIGRATION_DIR) status"


# ==========================================================
# Print the current version of the database
version:
	bash -c "goose -dir=$(MIGRATION_DIR) version"


# ==========================================================
# Apply sequential ordering to migrations
fix:
	bash -c "goose -dir=$(MIGRATION_DIR) fix"


# ==========================================================
# Check migration files without running them
validate:
	bash -c "goose -dir=$(MIGRATION_DIR) validate"
